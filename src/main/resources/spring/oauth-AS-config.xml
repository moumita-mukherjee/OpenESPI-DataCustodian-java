<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       		 http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			 http://www.springframework.org/schema/security
			 http://www.springframework.org/schema/security/spring-security-3.2.xsd
			 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			 http://www.springframework.org/schema/security/oauth2
			 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">



	<!-- Authorization server configuration -->

	<oauth:authorization-server 
		client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler" token-endpoint-url="/oauth/token"
		authorization-endpoint-url="/oauth/authorize">
		<oauth:authorization-code/>
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>


	<!-- Services for clients -->

	<sec:authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security/oauth2">
		<sec:authentication-provider
			user-service-ref="clientDetailsUserService" />
	</sec:authentication-manager>


	<!-- Services for resolving Users -->
	<!-- <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security"> 
		<authentication-provider user-service-ref="retailCustomerServiceImpl" /> 
		</authentication-manager> -->
	<bean id="clientDetailsService"
		class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService"
		lazy-init="true">
		<!-- <constructor-arg ref="mysqlClientDetails" /> -->
		<constructor-arg ref="mysqlTokenStore" />

	</bean>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService"
		lazy-init="true">
		<constructor-arg ref="clientDetailsService" />
	</bean>

	<!-- Token Management -->
	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices"
		lazy-init="true">
		<property name="tokenStore" ref="tokenStore" />
		<property name="tokenEnhancer" ref="tokenEnhancer" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetailsService" />
	</bean>



	<bean id="tokenEnhancer" class="org.energyos.espi.datacustodian.oauth.EspiTokenEnhancer"
		lazy-init="true">
	</bean>

	<!-- <bean id="authorizationCode" -->
	<!-- class="org.springframework.security.oauth2.provider.code.JdbcAuthorizatonCodeServices" 
		> -->
	<!-- <constructor-arg ref="mysqlAuthorizationCode"/> -->
	<!-- </bean> -->

	<!-- Token Approval Handler -->
	<bean id="userApprovalHandler"
		class="org.energyos.espi.datacustodian.oauth.EspiUserApprovalHandler"
		lazy-init="true">
		<property name="approvalStore" ref="approvalStore" />
		<property name="clientDetailsService" ref="clientDetailsService" />
		<property name="requestFactory" ref="requestFactory" />
	</bean>

	<bean id="approvalStore"
		class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore"
		lazy-init="true">
		<property name="tokenStore" ref="tokenStore" />
	</bean>

	<bean id="requestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory"
		lazy-init="true">
		<constructor-arg name="clientDetailsService" ref="clientDetailsService" />
	</bean>





	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
	 <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		
	</http>


  <bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>


	<!-- Override the default mappings for approval and error pages -->
	<bean id="accessConfirmationController"
		class="org.energyos.espi.datacustodian.oauth.AccessConfirmationController"
		lazy-init="true">
		<property name="clientDetailsService" ref="clientDetailsService" />
		<property name="approvalStore" ref="approvalStore" />
	</bean>

	<bean id="adminController"
		class="org.energyos.espi.datacustodian.oauth.OauthAdminController"
		lazy-init="true">
		<property name="tokenServices" ref="tokenServices" />
		<property name="tokenStore" ref="tokenStore" />
		<property name="userApprovalHandler" ref="userApprovalHandler" />
	</bean>


	<!-- DJ temp <sec:global-method-security pre-post-annotations="enabled" 
		proxy-target-class="true"> <sec:expression-handler ref="oauthExpressionHandler" 
		/> </sec:global-method-security> -->
	<!-- DJ to check -->


	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />

	<!--************************************** Development Configuration (Start) 
		************************************** -->
	<!-- OAuth Token Administrative Resources -->

	<http pattern="/oauth/tokens/**" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/oauth/users/**" access="ROLE_CUSTODIAN" />
		<!-- 
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		 -->
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<!--************************************** Development Configuration (End) 
		************************************** -->

</beans>